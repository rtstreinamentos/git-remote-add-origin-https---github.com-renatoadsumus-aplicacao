using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using MySql.Data.MySqlClient;
using PortalEscolar.Data;
using OrcamentoNet.Entity;
using OrcamentoNet.ILocalService;
using OrcamentoNet.Common;
using System.Xml.Linq;
using OrcamentoNet.Entity.Enum;
using System.Data;

namespace OrcamentoNet.LocalService
{
    public class CategoriaService : ICategoriaService
    {
        private IDataContext context;


        #region "Métodos Privados"
        private IList<Cidade> ObterCidadesComPedidosDeOrcamento(Categoria categoria, int quantidadeMinimaPedidos)
        {
            IList<Cidade> listaCidades = new List<Cidade>();
            try
            {
                //IList<PedidoOrcamento> pedidosOrcamento = context.Repository<PedidoOrcamento>().Where(x => x.Categorias.Contains(categoria)).ToList();

                //var cidadesComPedidos = from p in pedidosOrcamento group p by p.Cidade.Id into g where g.Count() >= quantidadeMinimaPedidos select g.Key;

                string strConexao = "Server=69.46.19.19;Database=orcamentonet;Uid=WordPressMU;Pwd=W0rdPr3ssM1@;Port=3306;";

                MySqlConnection conexao = new MySqlConnection(strConexao);
                conexao.Open();
                MySqlCommand sqlComand = new MySqlCommand("SELECT count(Cd_Cidade) as total ,Cd_Cidade FROM pedido_orcamento where Cd_Categoria=" + categoria.Id + " group by Cd_Cidade having total > " + quantidadeMinimaPedidos, conexao);
                conexao.Close();
                DataSet ds = new DataSet();
                MySqlDataAdapter adp = new MySqlDataAdapter(sqlComand);
                adp.Fill(ds, "IdsCidades");

                foreach (DataRow linha in ds.Tables["IdsCidades"].Rows)
                {
                    Cidade cidade = context.Repository<Cidade>().Where(x => x.Id == int.Parse(linha["Cd_Cidade"].ToString())).FirstOrDefault();

                    if (cidade != null)
                        listaCidades.Add(cidade);
                }

                ////foreach (Int32 cidadeId in cidadesComPedidos)
                ////{
                ////    Cidade cidade = context.Repository<Cidade>().Where(x => x.Id == cidadeId).FirstOrDefault();

                ////    if (cidade != null)
                ////        listaCidades.Add(cidade);
                ////}
            }
            catch (Exception ex)
            {
                Log.GravarLog(ex.Message);
            }
            return listaCidades;
        }

        private IList<LinkInterno> ObterLinksCidades(Categoria categoria)
        {
            IList<LinkInterno> listaLinksCidades = new List<LinkInterno>();
            int quantidadeMinimaDePedidosOrcamento = 6;
            IList<Cidade> listaCidades;

            try
            {
                // obtém a lista de cidades
                listaCidades = this.ObterCidadesComPedidosDeOrcamento(categoria, quantidadeMinimaDePedidosOrcamento);

                foreach (Cidade cidade in listaCidades)
                {
                    LinkInterno linkInterno = new LinkInterno();
                    linkInterno.Nome = cidade.Nome + " - " + cidade.Uf.ToString();
                    linkInterno.ToolTip = "Solicite orçamento online grátis de " + categoria.Nome + " em " + cidade.Nome + " (" + cidade.Uf.ToString() + ").";
                    linkInterno.UrlAmigavel = "/orcamento-online-" + this.GerarUrlParaSeo(categoria.UrlMappings) + "-" + this.GerarUrlParaSeo(cidade.Nome) + "-" + cidade.Uf.ToString().ToLower() + "-" + categoria.Id.ToString() + "-" + cidade.Id.ToString() + ".aspx";
                    listaLinksCidades.Add(linkInterno);
                }
                listaLinksCidades = listaLinksCidades.OrderBy(l => l.Nome).ToList();
            }

            catch (Exception ex)
            {
                Log.GravarLog(ex.Message);
            }

            return listaLinksCidades;
        }

        private IList<LinkInterno> ObterLinksTermos(Categoria categoria)
        {
            IList<LinkInterno> listaLinksTermos = new List<LinkInterno>();

            try
            {
                IList<string> listaTermos = categoria.Termo.Split(',');
                foreach (string termo in listaTermos)
                {
                    string termoSemEspacosAoRedor = termo.Trim();
                    LinkInterno linkInterno = new LinkInterno();
                    linkInterno.Nome = termoSemEspacosAoRedor;
                    linkInterno.ToolTip = "Solicite orçamento online grátis de " + categoria.Nome + " para " + termoSemEspacosAoRedor + ".";
                    linkInterno.UrlAmigavel = "/" + this.GerarUrlParaSeo(categoria.UrlMappings) + "-" + categoria.Id.ToString() + "/" + this.GerarUrlParaSeo(termoSemEspacosAoRedor) + ".aspx";
                    listaLinksTermos.Add(linkInterno);
                }
                listaLinksTermos = listaLinksTermos.OrderBy(l => l.Nome).ToList();
            }

            catch (Exception ex)
            {
                Log.GravarLog(ex.Message);
            }

            return listaLinksTermos;
        }
        #endregion

        #region "Métodos Públicos"
        public CategoriaService(IDataContext contextData)
        {
            context = contextData;
        }

        public void AtualizarUrlParaSeo()
        {
            IList<Categoria> categorias = new List<Categoria>();

            try
            {
                categorias = context.Repository<Categoria>().Where(c => c.Pai.Id != 0).ToList();
                foreach (Categoria categoria in categorias)
                {
                    string sufixoUrl = this.GerarUrlParaSeo(categoria.UrlMappings) + "-" + categoria.Id.ToString() + ".aspx";
                    categoria.Url = "orcamento-online-" + sufixoUrl;
                    categoria.UrlFornecedores = "cadastro-" + sufixoUrl;
					categoria.UrlSEO = sufixoUrl;
                }
            }
            catch (Exception ex)
            {
                Log.GravarLog(ex.Message);
            }
        }

        public string GerarUrlParaSeo(string nomeSemTratamento)
        {
            if (String.IsNullOrEmpty(nomeSemTratamento)) return String.Empty;

            string nomeAmigavel = nomeSemTratamento.Replace(",", String.Empty);

            string[] listaNomesCategorias = nomeAmigavel.Split(' ');

            List<string> listaNomesCategoriasModificadas = new List<string>();
            for (int i = 0; i < listaNomesCategorias.Length; i++)
            {
                if (listaNomesCategorias[i].Length > 1) listaNomesCategoriasModificadas.Add(listaNomesCategorias[i]);
            }

            nomeAmigavel = String.Join("-", listaNomesCategoriasModificadas.ToArray());
            nomeAmigavel = nomeAmigavel.ToLower();
            nomeAmigavel = UtilString.RemoverAcentos(nomeAmigavel);

            return nomeAmigavel;
        }

        public Categoria Obter(int id, bool montarLinkInterno)
        {
            Categoria categoria = new Categoria();

            try
            {
                categoria = context.Repository<Categoria>().Where(x => x.Id == id).FirstOrDefault();

                if (montarLinkInterno)
                    categoria.LinksInternos = this.ObterLinksCidades(categoria).Concat(this.ObterLinksTermos(categoria)).ToList();
            }
            catch (Exception ex)
            {
                Log.GravarLog(ex.Message);
            }

            return categoria;
        }

        public IList<Categoria> ObterCategoriasAtivas()
        {
            IList<Categoria> subCategorias = new List<Categoria>();

            try
            {
                subCategorias = context.Repository<Categoria>().ToList();
                subCategorias = subCategorias.Where(x => x.Pai.Id == 0 && x.Ativo == true).OrderBy(y => y.Nome).ToList();
            }
            catch (Exception ex)
            {
                Log.GravarLog(ex.Message);
            }

            return subCategorias;
        }

        public IList<Categoria> ObterSubCategoriasDeUmaCategoria(IList<string> categorias)
        {
            IList<Categoria> subCategoriasResultado = new List<Categoria>();

            foreach (string categoria in categorias)
            {
                subCategoriasResultado.Add(Obter(Convert.ToInt32(categoria), false));
            }
            return subCategoriasResultado;

        }

        public IList<Categoria> ObterSubCategorias()
        {
            IList<Categoria> subCategorias = new List<Categoria>();

            try
            {
                subCategorias = context.Repository<Categoria>().ToList();
                subCategorias.Where(x => x.Pai.Id != 0).OrderBy(y => y.Nome).ToList();
            }
            catch (Exception ex)
            {
                Log.GravarLog(ex.Message);
            }

            return subCategorias;
        }

        public IList<Categoria> ObterSubCategoriasAtivas()
        {
            IList<Categoria> subCategorias = new List<Categoria>();

            try
            {
                subCategorias = context.Repository<Categoria>()
                    .Where(x => x.Pai.Id != 0 && x.Pai.Id != 0 && x.Ativo == true)
                    .OrderBy(y => y.Nome).ToList();
            }
            catch (Exception ex)
            {
                Log.GravarLog(ex.Message);
            }

            return subCategorias;
        }

        public IList<Categoria> ObterCategoriasComFornecedoresCadastrados()
        {
            IList<Categoria> subCategorias = new List<Categoria>();
            IList<Categoria> resultado = new List<Categoria>();
            IList<Categoria> resultadoFilhos = new List<Categoria>();

            try
            {
                subCategorias = context.Repository<Categoria>().ToList();
                subCategorias = subCategorias.Where(x => x.Pai.Id == 0).OrderBy(y => y.Nome).ToList();

                Categoria pai;
                Categoria filho;

                foreach (Categoria item in subCategorias)
                {
                    pai = new Categoria();
                    pai = item;
                    resultadoFilhos = new List<Categoria>();

                    foreach (Categoria item2 in item.SubCategorias)
                    {
                        if (item2.Ativo)
                        {
                            filho = new Categoria();
                            filho = item2;
                            resultadoFilhos.Add(filho);
                        }
                    }
                    pai.SubCategorias = resultadoFilhos;
                    resultado.Add(pai);
                }
            }
            catch (Exception ex)
            {
                Log.GravarLog(ex.Message);
            }

            return resultado;
        }

        public IEnumerable<XElement> ObterXMLCategoria(int idCategoria)
        {
            XElement xml = XElement.Load(Config.CaminhoFisico + "Categoria.xml");

            var categoria = from p in xml.Elements("categoria")
                            where (int)p.Element("id") == idCategoria
                            select p;
            return categoria;
        }


        public void Inserir(Categoria categoria)
        {
            categoria.Ativo = true;
            context.Insert(categoria);
        }
        #endregion

        /// <summary>
        /// Retorna todas as subcategorias de uma categoria que tenha fornecedor cadastrado
        /// /// </summary>
        /// <param name="cidade"></param>
        /// <param name="categoriaPai"></param>
        /// <returns></returns>
        public IList<Categoria> ObterSubCategoriasComFornecedorPorCidade(Cidade cidade, int categoriaPai)
        {
            IList<Categoria> categoriasComFornecedor = new List<Categoria>();

            IList<Fornecedor> fornecedoresCidade = context.Repository<Fornecedor>().Where(x => x.Cidades.Contains(cidade) && x.Status == Status.Degustacao).ToList();

            var categorias = (from c in fornecedoresCidade select c.SubCategorias).Distinct();

            foreach (var item in categorias)
            {
                for (int i = 0; i < item.Count(); i++)
                {
                    if (item[i].Pai.Id == categoriaPai && !categoriasComFornecedor.Contains(item[i]))
                        categoriasComFornecedor.Add(item[i]);
                }

            }

            return categoriasComFornecedor.OrderBy(x => x.Nome).ToList(); ;
        }


        public IList<Categoria> ObterCategoriasDeUmTema(int idCategoriaPai)
        {
            IList<Categoria> subCategorias = new List<Categoria>();

            try
            {
                subCategorias = context.Repository<Categoria>().ToList();
                subCategorias = subCategorias.Where(x => x.Pai.Id == idCategoriaPai && x.Ativo == true).OrderBy(y => y.Nome).ToList();
            }
            catch (Exception ex)
            {
                Log.GravarLog(ex.Message);
            }

            return subCategorias;
        }
    }
}
